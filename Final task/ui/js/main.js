(function () {    var $calendarMonth = $('.table-month'),        $calendarYear = $('.table-year'),        date = new Date(),        currentMonth = date.getMonth(),        currentYear = date.getFullYear(),        monthArray = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],        $days = $('table td').not('.other-month'),        $widgetOverlay = $('.widget-overlay'),    //  variables for search form        $searchWidget = $('.widget-search'),    //  поле ввода даты в форме " Search rooms "        $checkInDate = $('#check-in'),        $checkOutDate = $('#check-out'),        $dateFromCalendar = $('input[type="date"]'),        bookedDaysArray = [];    //  устанавливаем значение месяца и года по умолчанию    $calendarMonth.html(monthArray[currentMonth]);    $calendarYear.html(currentYear);    //  функция изменения месяца в шапке календаря    function changeMonth(e) {        e.preventDefault();        if ($(this).hasClass('calendar-next')) {            if (currentMonth === 11) {                $calendarYear.html(currentYear + 1);                currentYear++;                currentMonth = -1;            }            $calendarMonth.html(monthArray[currentMonth + 1]);            currentMonth++;        } else {            if (currentMonth === 0) {                $calendarYear.html(currentYear - 1);                currentYear--;                currentMonth = 12;            }            $calendarMonth.html(monthArray[currentMonth - 1]);            currentMonth--;        }    }    $('.calendar-next').click(changeMonth);    $('.calendar-prev').click(changeMonth);    //  задаем событие клик для показа скрытых виджетов    $('[data-show^="widget-"]').click(function () {        var $openWidget = $(this).data('show');        showWidget($openWidget)    });    //  функция для скрывания виджетов и очистка полей    $widgetOverlay.click(function () {        var widgets = $('[id^="widget-"]');        $(this).hide();        widgets.hide();    });    //  функция удаления стилей ошибок для формы поиска    function removeErrorStyles() {        $searchWidget.find('.error-val').removeClass('error-val');        $searchWidget.find('.required').val('');    }    $('.search-form').submit(function (e) {        e.preventDefault();        var $checkInDateVal = $checkInDate.val(),            $checkOutDateVal = $checkOutDate.val();        //  проверяем на пустоту инпуты ффода дат        if (checkEmptyFields($checkInDate) === 'empty' || checkEmptyFields($checkOutDate) === 'empty') {            return;        }        //  получаем миллисекунды из введенной даты в поле " check-in "        var checkInMs = getMsFromStringDate($checkInDateVal);        //  получаем миллисекунды из введенной даты в поле " check-out "        var checkOutMs = getMsFromStringDate($checkOutDateVal);        if (isNaN(checkInMs) || isNaN(checkOutMs)) {            $checkInDate.addClass('error-val');            $checkOutDate.addClass('error-val');            return;        }        var checkInObj = makeObjectFromMs(checkInMs);        var checkOutObj = makeObjectFromMs(checkOutMs);        //  создаем временный массив выбранных дат        var temporaryArray = $days.map(function (index, el) {            if (index >= checkInObj.day - 1 && index <= checkOutObj.day - 1) {                return el;            }        });        //  проверяем временный массив на наличие в нем класса " booked "        if (!temporaryArray.is('.booked')) {            //  перекрашиваем ячейки если класс отсутствует            temporaryArray.each(function (index, el) {                $(el).addClass('booked');            });            //  прячем окошко ввода дат и обнуляем значения инпутов            $searchWidget.hide();            $widgetOverlay.hide();            $checkInDate.val('');            $checkOutDate.val('');        } else {            //  устанавливаем стили на ошибки и прячем форму            $checkInDate.addClass('error-val');            $checkOutDate.addClass('error-val');            $searchWidget.delay(2000).fadeOut(500);            $widgetOverlay.delay(2000).fadeOut(500);            setTimeout(removeErrorStyles, 3000);            return;        }        //  записываем диапазон закрашеных дат в массив для дальнейшей проверки вхождений        //  значения записываем в миллисекундах        bookedDaysArray.push([checkInMs, checkOutMs]);    });    //  слушаем изменения в input type=date    $dateFromCalendar.change(function () {        var $this = $(this);        //  получаем значине инпута        var msFromInput = ($this[0].valueAsNumber);        //  переводим дату в нужный формат для отображения        var normalDate = normalizeDateFromMs(msFromInput);        //  вставляем дату в соседний инпут        $this.prev().val(normalDate);    });    //  вешаем событие клик на ячейку таблицы, для получения диапазона дат в форме поиска    $days.click(function () {        var $clickedDay = $(this).html(),        // собираем дату в строку            $clickedDate = $calendarMonth.html() + $clickedDay + ',' + $calendarYear.html();        if ($(this).hasClass('booked')) {            //  получаем обьект с диапазоном дат            var dateRange = checkDateRange(Date.parse($clickedDate));            if (dateRange.firstBookingDay) {                //  показываем виждет поиска и записываем значения в соответствующие поля                showWidget('widget-search');                $checkInDate.val(dateRange.firstBookingDay);                $checkOutDate.val(dateRange.lastBookingDay);            }        }    });    //  показываем скрытый список в форме поиска    $('.icon-arrow-down').click(function (e) {        e.preventDefault();        $(this).prev().show();    });    //  вешаем событие клик для передачи значения в инпут выпатающего списка    $('.select li').click(function (e) {        var $selectList = $(this).closest('ul');        $selectList.prev().val($(this).html());        $selectList.hide();    });    /**     ////////////////////   TABS   ////////////////////     */    //получаем элемент из HTML    var $likesSelector = $('span.icon-like');    //  вешаем событие на элемент лайков    $likesSelector.contextmenu(function (e) {        //  отменяем стандартное поведение конекстного меню        e.preventDefault();        //  получаем число лайков из HTML        var likes = +$(this).html();        //  проверяем какая кнопка была нажата        if (e.which === 3) {            //  увеличиваем число на 1            $(this).html(likes + 1);        }    });    $likesSelector.mousedown(function (e) {        //  отменяем стандартное поведение конекстного меню        e.preventDefault();        //  получаем число лайков из HTML        var likes = +$(this).html();        //  проверяем какая кнопка была нажата        if (e.which === 1) {            //  уменьшаем число на 1            $(this).html(likes - 1);        }    });//  вешаем осбытие клик на ссылку таба    $('.tabs-nav a').click(function (e) {        //  запрешаем переход по ссылке        e.preventDefault();        var $this = $(this),            currentTab = $this.attr('href');        //  добавляем класс " active " нашему табу и снимаем классы с его братьев (табов лежащих в данном родителе)        $('.tabs-content ' + currentTab)            .addClass('active')            .siblings()            .removeClass('active');        //  добавляем выбранной ссылке класс " active " и снимаем классы с его братьев (ссылок лежащих в данном родителе)        $this.parent()            .addClass('active')            .siblings()            .removeClass('active');    });    //вешаем событие клик для закрытия виджета "mail"    $('.close').click(function (e) {        e.preventDefault();        $('#widget-mail').hide();        $widgetOverlay.hide();    });    //  вешаем событие на загрузку файла    $('#file-upload').change(function (e) {        var $this = $(this);        //  получаем значение инпута        var $file = $this.val();        //  выбираем элемент для вставки названия файла        var $fileField = $('#subject');        //  получаем индекс искомой подстроки        var $lastSlash = $file.lastIndexOf('\\');        //  вырезаем название файла от полученного индекса до конца строки        var $fileName = $file.slice($lastSlash + 1);        //  записываем название фала в ранее выбранный инпут        $fileField.val($fileName);    });    //  вешаем событие на отправку формы "send-mail"    $('.mail-form').submit(function (e) {        e.preventDefault();        var $subject = $('#subject'),            $mailList = $('#mail-list');        //  проверяем поле емайл на наличие "@"        var emailSymbolAt = $mailList.val().indexOf('@');        //  проверяем поле емайл на наличие "."        var emailSymbolDot = $mailList.val().indexOf('.');        //  выделяем инпут если поле емайл заполнено не верно        if (emailSymbolAt === -1 || emailSymbolDot === -1 || $mailList === "") {            //$mailList.css('border', '1px solid red');            $mailList.addClass('error-val');        } else {            //$mailList.css('border', 'none');            $mailList.removeClass('error-val');        }        //  проверяем заполненость поля " subject " на пустоту        checkEmptyFields($subject);    });    /**     * END TABS     * */    /**     * Графики     * */    //  получаем коллекции элементов гравика    var $graphScale = $('.graph-scale span');   //набор столбиком    var $columnValue = $('.graph-tooltip');     //набор подсказал    //  вешаем событие на на отправку формы    $('#graph-form').submit(function (e) {        e.preventDefault();        //  получаем коллекцию инпутов из формы        var formValue = $(this).find('input[type="text"]');        var sortedValue;        var maxValue;        //  массив полученных значений из формы        var valueArray = [];        //  массив отсортированных значений        var sortedArray = [];        //  записываем в мссив полученные значения из формы        for (var j = 0; j < formValue.length; j++) {            //  проверяем поля на заполенность числами            if (!isNaN(formValue.eq(j).val()) && formValue.eq(j).val() !== "") {                //  записываем значения                valueArray.push(formValue.eq(j).val());                sortedArray.push(formValue.eq(j).val());                //formValue.eq(j).css('border', 'none');                formValue.eq(j).removeClass('error-val');            } else {                //formValue.eq(j).css('border', '1px solid red');                formValue.eq(j).addClass('error-val');                return;            }        }        //  сортируем массив        sortedValue = sortedArray.sort(function (val1, val2) {            return val1 - val2;        });        //  получаем максимвльное значение        maxValue = sortedArray[sortedValue.length - 1];        //  выставляем значения по оси " Y "        $graphScale.eq(0).html(maxValue);        $graphScale.eq(1).html(Math.ceil(maxValue * .75));        $graphScale.eq(2).html(Math.ceil(maxValue * .50));        $graphScale.eq(3).html(Math.ceil(maxValue * .25));        $graphScale.eq(4).html('0');        //  прячем форму        $('#widget-graph-value').hide();        $widgetOverlay.hide();        //  устанавливаем высоты для столбтков        for (var i = 0; i < $columnValue.length; i++) {            $columnValue.eq(i).html(valueArray[i]);            $columnValue.eq(i).parents('.scale').css('height', valueArray[i] * 100 / maxValue + '%');        }    });    /**     * Функции для работы с виджетами     * */    //  функция для показа скрытых виджетов    //принимает id виждета    function showWidget(val) {        $widgetOverlay.show();        $('#' + val).show();    }    //  функции для работы с датами    //  функция для получения дня, месяца и года из миллисекунд    function makeObjectFromMs(ms) {        var date = new Date(ms);        return {            year: date.getFullYear(),            month: date.getMonth() + 1,            day: date.getDate()        };    }    //  функция получения миллисекунд из даты    function getMsFromStringDate(str) {        //  устанавливаем нужный форма для парса даты        var reversDateStr = str.slice(6) + '.' + str.slice(3, 5) + '.' + str.slice(0, 2);        //  получаем миллисекунды        return Date.parse(reversDateStr);    }    //  функция для получения даты вида " 01.01.2016 "    function normalizeDateFromMs(ms) {        //  получаем обьект даты        var arriveDate = makeObjectFromMs(ms);        //  добавляем 0 перед цифрой месяца        if (arriveDate.month < 10) {            arriveDate.month = '0' + arriveDate.month;        }        //  добавляем 0 перед цифрой дня        if (arriveDate.day < 10) {            arriveDate.day = '0' + arriveDate.day;        }        //  возвращаем строку        return arriveDate.day + '.' + arriveDate.month + '.' + arriveDate.year;    }    ///////////////////////////////////////////////////////////////////////////////////////////    //  функция для проверки вхождения даты в диапазон    function checkDateRange(date) {        for (var i = 0; i < bookedDaysArray.length; i++) {            if (date >= bookedDaysArray[i][0] && date <= bookedDaysArray[i][1]) {                //  возвращаем диапазон дат для вывода в форме                return {                    firstBookingDay: normalizeDateFromMs(bookedDaysArray[i][0]),                    lastBookingDay: normalizeDateFromMs(bookedDaysArray[i][1])                }            }        }    }    //  функция для проверки на незаполненность полей    function checkEmptyFields(val) {        if (val.val() == "") {            val.addClass('error-val');            return 'empty';        } else {            val.removeClass('error-val');            return 'completed'        }    }})();